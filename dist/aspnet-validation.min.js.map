{"version":3,"sources":["webpack://aspnetValidation/webpack/universalModuleDefinition","webpack://aspnetValidation/webpack/bootstrap","webpack://aspnetValidation/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","getRelativeFormElement","elementName","selector","realSelector","substr","dotLocation","lastIndexOf","relativeElementName","relativeElement","document","getElementsByName","required","element","params","Boolean","stringLength","min","parseInt","length","max","compare","other","otherElement","range","val","parseFloat","isNaN","regex","pattern","RegExp","test","email","creditcard","cDigit","nCheck","nDigit","bEven","replace","charAt","url","phone","remote","fieldSelectors","additionalfields","split","fields","fieldSelector","fieldName","fieldElement","encodedParams","encodedParam","encodeURIComponent","push","payload","join","Promise","ok","reject","request","XMLHttpRequest","type","postData","FormData","append","open","setRequestHeader","send","onload","e","status","data","JSON","parse","responseText","statusText","onerror","handleSubmit","providers","messageFor","elementUIDs","elementByUID","formInputs","validators","elementEvents","summary","debounce","this","summaryElements","querySelectorAll","validationSummaryMessages","innerHTML","addProvider","callback","addMvcProviders","mvc","MvcValidationProviders","scanMessages","validationMessageElements","getAttribute","parseDirectives","attributes","directives","validationAtributes","cut","a","indexOf","parameters","keys","filter","Q","directive","error","pcut","pvalue","pkey","guid4","Math","random","toString","getElementUID","node","x","uid","getFormValidationTask","formUID","formInputUIDs","formValidators","inputUID","tasks","map","all","then","result","every","trackFormInput","form","cb","validate","preventDefault","success","submit","catch","console","log","addEventListener","input","classList","remove","spans","renderSummary","addInput","createValidator","delay","clearTimeout","setTimeout","tagName","toLowerCase","scanInputs","inputs","createSummaryDOM","ul","createElement","li","appendChild","shadow","stringify","sort","renderedSummaryJSON","className","cloneNode","addError","message","add","removeError","provider","valid","resolution","bootstrap","event"],"mappings":"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","file":"aspnet-validation.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"aspnetValidation\"] = factory();\n\telse\n\t\troot[\"aspnetValidation\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * A simple IDictionary<string, string>\n */\nexport interface StringKeyValuePair {\n    [key: string]: string\n}\n\n/**\n * A duplex key-value pair for an element, by GUID or its DOM object reference.\n */\ninterface ElementUID {\n    node: Element,\n    uid: string;\n}\n\n/**\n * Parameters passed into validation providers from the element attributes.\n * error property is read from data-val-[Provider Name] attribute.\n * params property is populated from data-val-[Provider Name]-[Parameter Name] attributes.\n */\nexport interface ValidationDirectiveBindings {\n    error: string,\n    params: StringKeyValuePair\n}\n\n/**\n * A key-value pair describing what validations to enforce to an input element, with respective parameters.\n */\nexport type ValidationDirective = {\n    [key: string]: ValidationDirectiveBindings\n};\n\n/**\n * Validation plugin signature with multitype return.\n * Boolean return signifies the validation result, which uses the default validation error message read from the element attribute.\n * String return signifies failed validation, which then will be used as the validation error message.\n * Promise return signifies asynchronous plugin behavior, with same behavior as Boolean or String.\n */\nexport type ValidationProvider = (value: string, element: HTMLInputElement, params: StringKeyValuePair) => boolean | string | Promise<boolean | string>;\n\n/**\n * A callback method signature that kickstarts a new validation task for an input element, as a Boolean Promise.\n */\ntype Validator = () => Promise<boolean>;\n\n/**\n * Resolves and returns the element referred by original element using ASP.NET selector logic.\n * @param elementName \n */\nfunction getRelativeFormElement(elementName: string, selector: string) {\n    // example elementName: Form.PasswordConfirm, Form.Email\n    // example selector (dafuq): *.Password, *.__RequestVerificationToken\n    // example result element name: Form.Password, __RequestVerificationToken\n\n    let realSelector = selector.substr(2); // Password, __RequestVerificationToken\n    let objectName = '';\n\n    let dotLocation = elementName.lastIndexOf('.');\n    if (dotLocation > -1) {\n        // Form\n        objectName = elementName.substr(0, dotLocation);\n\n        // Form.Password\n        let relativeElementName = objectName + '.' + realSelector;\n        let relativeElement = document.getElementsByName(relativeElementName)[0];\n        if (relativeElement) {\n            return relativeElement;\n        }\n    }\n\n    // __RequestVerificationToken\n    return document.getElementsByName(realSelector)[0];\n}\n\n/**\n * Contains default implementations for ASP.NET Core MVC validation attributes.\n */\nexport class MvcValidationProviders {\n    /**\n     * Validates whether the input has a value.\n     */\n    required: ValidationProvider = (value, element, params) => {\n        return Boolean(value);\n    }\n\n    /**\n     * Validates whether the input value satisfies the length contstraint.\n     */\n    stringLength: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        if (params.min) {\n            let min = parseInt(params.min);\n            if (value.length < min) {\n                return false;\n            }\n        }\n\n        if (params.max) {\n            let max = parseInt(params.max);\n            if (value.length > max) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates whether the input value is equal to another input value.\n     */\n    compare: ValidationProvider = (value, element, params) => {\n        if (!params.other) {\n            return true;\n        }\n\n        let otherElement = getRelativeFormElement(element.name, params.other) as HTMLInputElement;\n        if (!otherElement) {\n            return true;\n        }\n\n        return (otherElement.value === value);\n    }\n\n    /**\n     * Validates whether the input value is a number within a given range.\n     */\n    range: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        let val = parseFloat(value);\n        if (isNaN(val)) {\n            return false;\n        }\n\n        if (params.min) {\n            let min = parseFloat(params.min);\n            if (val < min) {\n                return false;\n            }\n        }\n\n        if (params.max) {\n            let max = parseFloat(params.max);\n            if (val > max) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Validates whether the input value satisfies a regular expression pattern.\n     */\n    regex: ValidationProvider = (value, element, params) => {\n        if (!value || !params.pattern) {\n            return true;\n        }\n\n        let r = new RegExp(params.pattern);\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is an email in accordance to RFC822 specification, with a top level domain.\n     */\n    email: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // RFC822 email address with .TLD validation\n        // (c) Richard Willis, Chris Ferdinandi, MIT Licensed\n        // https://gist.github.com/badsyntax/719800\n        // https://gist.github.com/cferdinandi/d04aad4ce064b8da3edf21e26f8944c4\n\n        let r = /^([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x22([^\\x0d\\x22\\x5c\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x22))*\\x40([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d)(\\x2e([^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+|\\x5b([^\\x0d\\x5b-\\x5d\\x80-\\xff]|\\x5c[\\x00-\\x7f])*\\x5d))*(\\.\\w{2,})+$/;\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is a credit card number, with Luhn's Algorithm.\n     */\n    creditcard: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // (c) jquery-validation, MIT Licensed\n        // https://github.com/jquery-validation/jquery-validation/blob/master/src/additional/creditcard.js\n        // based on https://en.wikipedia.org/wiki/Luhn_algorithm\n\n        // Accept only spaces, digits and dashes\n        if (/[^0-9 \\-]+/.test(value)) {\n            return false;\n        }\n\n        var nCheck = 0,\n            nDigit = 0,\n            bEven = false,\n            n, cDigit;\n\n        value = value.replace(/\\D/g, \"\");\n\n        // Basing min and max length on https://developer.ean.com/general_info/Valid_Credit_Card_Types\n        if (value.length < 13 || value.length > 19) {\n            return false;\n        }\n\n        for (n = value.length - 1; n >= 0; n--) {\n            cDigit = value.charAt(n);\n            nDigit = parseInt(cDigit, 10);\n            if (bEven) {\n                if ((nDigit *= 2) > 9) {\n                    nDigit -= 9;\n                }\n            }\n\n            nCheck += nDigit;\n            bEven = !bEven;\n        }\n\n        return (nCheck % 10) === 0;\n    }\n\n    /**\n     * Validates whether the input value is a URL.\n     */\n    url: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // (c) Diego Perini, MIT Licensed\n        // https://gist.github.com/dperini/729294\n\n        var r = new RegExp(\n            \"^\" +\n            // protocol identifier\n            \"(?:(?:https?|ftp)://)\" +\n            // user:pass authentication\n            \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n            \"(?:\" +\n            // IP address exclusion\n            // private & local networks\n            \"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n            \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n            \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\" +\n            // IP address dotted notation octets\n            // excludes loopback network 0.0.0.0\n            // excludes reserved space >= 224.0.0.0\n            // excludes network & broacast addresses\n            // (first & last IP address of each class)\n            \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n            \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n            \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n            \"|\" +\n            // host name\n            \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n            // domain name\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n            // TLD identifier\n            \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n            // TLD may end with dot\n            \"\\\\.?\" +\n            \")\" +\n            // port number\n            \"(?::\\\\d{2,5})?\" +\n            // resource path\n            \"(?:[/?#]\\\\S*)?\" +\n            \"$\", \"i\"\n        );\n\n        return r.test(value);\n    }\n\n    /**\n     * Validates whether the input value is a phone number.\n     */\n    phone: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // Allows whitespace or dash as number separator because some people like to do that...\n        let consecutiveSeparator = /[\\+\\-\\s][\\-\\s]/g;\n        if (consecutiveSeparator.test(value)) {\n            return false;\n        }\n\n        let r = /^\\+?[0-9\\-\\s]+$/;\n        return r.test(value);\n    }\n\n    /**\n     * Asynchronously validates the input value to a JSON GET API endpoint. \n     */\n    remote: ValidationProvider = (value, element, params) => {\n        if (!value) {\n            return true;\n        }\n\n        // params.additionalfields: *.Email,*.Username\n        let fieldSelectors: string[] = (params.additionalfields as string).split(',');\n        let fields: StringKeyValuePair = {};\n\n        for (let fieldSelector of fieldSelectors) {\n            let fieldName = fieldSelector.substr(2);\n            let fieldElement = getRelativeFormElement(element.name, fieldSelector) as HTMLInputElement;\n\n            let hasValue = Boolean(fieldElement && fieldElement.value);\n            if (!hasValue) {\n                continue;\n            }\n\n            fields[fieldName] = fieldElement.value;\n        }\n\n        let url: string = params['url'];\n        // console.log(fields);\n\n        let encodedParams: string[] = [];\n        for (let fieldName in fields) {\n            let encodedParam = encodeURIComponent(fieldName) + '=' + encodeURIComponent(fields[fieldName]);\n            encodedParams.push(encodedParam);\n        }\n        let payload = encodedParams.join('&');\n        // console.log(payload);\n\n        return new Promise((ok, reject) => {\n            let request = new XMLHttpRequest();\n\n            if (params.type === 'Post') {\n                let postData = new FormData();\n                for (let fieldName in fields) {\n                    postData.append(fieldName, fields[fieldName]);\n                }\n                request.open('post', url);\n                request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n                request.send(payload);\n            } else {\n                request.open('get', url + '?' + payload);\n                request.send();\n            }\n\n            request.onload = e => {\n                if (request.status >= 200 && request.status < 300) {\n                    let data = JSON.parse(request.responseText);\n                    ok(data);\n                } else {\n                    reject({\n                        status: request.status,\n                        statusText: request.statusText,\n                        data: request.responseText\n                    });\n                }\n            };\n\n            request.onerror = e => {\n                reject({\n                    status: request.status,\n                    statusText: request.statusText,\n                    data: request.responseText\n                });\n            };\n        });\n    }\n}\n\n/**\n * Responsibles for managing the DOM elements and running the validation providers.\n */\nexport class ValidationService {\n    constructor({handleSubmit}) {\n        this.handleSubmit = handleSubmit ? handleSubmit : this.handleSubmit;\n        \n        //Only handles one summary element for now\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\n        if (summaryElements.length) {\n            for (let i = 0; i < summaryElements.length; i++) {\n                this.validationSummaryMessages[i] = summaryElements[i].innerHTML\n            }\n        }\n\n      }\n    /**\n     * A key-value collection of loaded validation plugins. \n     */\n    private providers: { [name: string]: ValidationProvider } = {};\n\n    /**\n     * A key-value collection of <span> elements for displaying validation messages for an input (by DOM ID).\n     */\n    private messageFor: { [id: string]: Element[] } = {};\n\n    /**\n     * A list of managed elements, each having a randomly assigned unique identifier (UID).\n     */\n    private elementUIDs: ElementUID[] = [];\n\n    /**\n     * A key-value collection of UID to Element for quick lookup. \n     */\n    private elementByUID: { [uid: string]: Element } = {};\n\n    /**\n     * A key-value collection of input UIDs for a <form> UID.\n     */\n    private formInputs: { [formUID: string]: string[] } = {};\n\n    /**\n     * A key-value map for input UID to its validator factory.\n     */\n    private validators: { [inputUID: string]: Validator } = {};\n\n    /**\n     * A key-value map for element UID to its trigger element (submit event for <form>, input event for <textarea> and <input>).\n     */\n    private elementEvents: { [id: string]: (Event) => any } = {};\n\n    /**\n     * A key-value map of input UID to its validation error message.\n     */\n    private summary: StringKeyValuePair = {};\n\n    /**\n     * A serialized representation of the validation error message summary rendered to the user.\n     */\n    private renderedSummaryJSON: string;\n\n    /**\n     * In milliseconds, the rate of fire of the input validation.\n     */\n    debounce = 300;\n\n    /**\n     * Should Asp-Net trigger a submit if Validation is successful?\n     */\n    private handleSubmit: true;\n\n    /**\n     * Contents of Validation Summary Div on Init\n     */\n    private validationSummaryMessages: Array<string>;\n\n    /**\n     * Registers a new validation plugin of the given name, if not registered yet.\n     * Registered plugin validates inputs with data-val-[name] attribute, used as error message.\n     * @param name \n     * @param callback \n     */\n    addProvider(name: string, callback: ValidationProvider) {\n        if (this.providers[name]) {\n            // First-Come-First-Serve validation plugin design.\n            // Allows developers to override the default MVC Providers by adding custom providers BEFORE bootstrap() is called!\n            return;\n        }\n        this.providers[name] = callback;\n    }\n\n    /**\n     * Registers the default providers for enabling ASP.NET Core MVC client-side validation. \n     */\n    private addMvcProviders() {\n        let mvc = new MvcValidationProviders();\n\n        // [Required]\n        this.addProvider('required', mvc.required);\n        // [StringLength], [MinLength], [MaxLength]\n        this.addProvider('length', mvc.stringLength);\n        this.addProvider('maxlength', mvc.stringLength);\n        this.addProvider('minlength', mvc.stringLength);\n        // [Compare]\n        this.addProvider('equalto', mvc.compare);\n        // [Range]\n        this.addProvider('range', mvc.range);\n        // [RegularExpression]\n        this.addProvider('regex', mvc.regex);\n        // [CreditCard]\n        this.addProvider('creditcard', mvc.creditcard);\n        // [EmailAddress]\n        this.addProvider('email', mvc.email);\n        // [Url]\n        this.addProvider('url', mvc.url);\n        // [Phone]\n        this.addProvider('phone', mvc.phone);\n        // [Remote]\n        this.addProvider('remote', mvc.remote);\n    }\n\n    /**\n     * Scans document for all validation message <span> generated by ASP.NET Core MVC, then tracks them.\n     */\n    private scanMessages() {\n        let validationMessageElements = document.querySelectorAll('[data-valmsg-for]');\n\n        for (let i = 0; i < validationMessageElements.length; i++) {\n            let e = validationMessageElements[i];\n            let name = e.getAttribute('data-valmsg-for');\n\n            if (!this.messageFor[name]) {\n                this.messageFor[name] = [];\n            }\n\n            this.messageFor[name].push(e);\n        }\n    }\n\n    /**\n     * Given attribute map for an HTML input, returns the validation directives to be executed. \n     * @param attributes \n     */\n    parseDirectives(attributes: NamedNodeMap) {\n        let directives: ValidationDirective = {};\n        let validationAtributes: StringKeyValuePair = {};\n\n        let cut = 'data-val-'.length;\n        for (let i = 0; i < attributes.length; i++) {\n            let a = attributes[i];\n            if (a.name.indexOf('data-val-') === 0) {\n                let key = a.name.substr(cut);\n                validationAtributes[key] = a.value;\n            }\n        }\n\n        for (let key in validationAtributes) {\n            if (key.indexOf('-') === -1) {\n                let parameters = Object.keys(validationAtributes).filter(Q => {\n                    return (Q !== key) && (Q.indexOf(key) === 0);\n                });\n\n                let directive: ValidationDirectiveBindings = {\n                    error: validationAtributes[key],\n                    params: {}\n                };\n\n                let pcut = (key + '-').length;\n                for (let i = 0; i < parameters.length; i++) {\n                    let pvalue = validationAtributes[parameters[i]];\n                    let pkey = parameters[i].substr(pcut);\n\n                    directive.params[pkey] = pvalue;\n                }\n\n                directives[key] = directive;\n            }\n        }\n\n        // console.log(directives);\n        return directives;\n    }\n\n    /**\n     *  Returns an RFC4122 version 4 compliant GUID.\n     */\n    private guid4() {\n        // (c) broofa, MIT Licensed\n        // https://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript/2117523#2117523\n\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    /**\n     * Gets a UID for an DOM element.\n     * @param node \n     */\n    private getElementUID(node: Element) {\n        let x = this.elementUIDs.filter(e => {\n            return e.node === node;\n        })[0];\n\n        if (x) {\n            return x.uid;\n        }\n\n        let uid = this.guid4();\n        this.elementUIDs.push({\n            node: node,\n            uid: uid\n        });\n        this.elementByUID[uid] = node;\n        return uid;\n    }\n\n    /**\n     * Returns a Promise that returns validation result for each and every inputs within the form.\n     * @param formUID \n     */\n    private getFormValidationTask(formUID: string) {\n        let formInputUIDs = this.formInputs[formUID];\n        if (!formInputUIDs || formInputUIDs.length === 0) {\n            return null;\n        }\n\n        let formValidators: Validator[] = [];\n\n        for (let i = 0; i < formInputUIDs.length; i++) {\n            let inputUID = formInputUIDs[i];\n            formValidators.push(this.validators[inputUID]);\n        }\n\n        let tasks = formValidators.map(factory => factory());\n        return Promise.all(tasks).then(result => result.every(e => e));\n    }\n\n    /**\n     * Tracks a <form> element as parent of an input UID. When the form is submitted, attempts to validate the said input asynchronously.\n     * @param form \n     * @param inputUID \n     */\n    private trackFormInput(form: HTMLFormElement, inputUID: string) {\n        let formUID = this.getElementUID(form);\n        if (!this.formInputs[formUID]) {\n            this.formInputs[formUID] = [];\n        }\n        let add = (this.formInputs[formUID].indexOf(inputUID) === -1);\n        if (add) {\n            this.formInputs[formUID].push(inputUID);\n        }\n\n        if (this.elementEvents[formUID]) {\n            return;\n        }\n\n        let cb = e => {\n            let validate = this.getFormValidationTask(formUID);\n            if (!validate) {\n                return;\n            }\n\n            e.preventDefault();\n            validate.then(success => {\n                if (success) {\n                    form.submit();\n                }\n            }).catch(error => {\n                console.log(error);\n            });\n        };\n\n        if(this.handleSubmit) form.addEventListener('submit', cb);\n        form.addEventListener('reset', e => {\n            let uids = this.formInputs[formUID];\n\n            for (let uid of uids) {\n                let input = this.elementByUID[uid] as HTMLInputElement;\n                input.classList.remove('input-validation-error');\n                input.classList.remove('input-validation-valid');\n\n                let spans = this.messageFor[input.name];\n                if (spans) {\n                    for (let i = 0; i < spans.length; i++) {\n                        spans[i].innerHTML = '';\n                    }\n                }\n\n                delete this.summary[uid];\n            }\n            this.renderSummary();\n        });\n        this.elementEvents[formUID] = cb;\n    }\n\n    /**\n     * Adds an input element to be managed and validated by the service.\n     * Triggers a debounced live validation when input value changes.\n     * @param input \n     */\n    addInput(input: HTMLInputElement) {\n        let uid = this.getElementUID(input);\n\n        let directives = this.parseDirectives(input.attributes);\n        let validate = this.createValidator(input, directives);\n\n        this.validators[uid] = validate;\n        if (input.form) {\n            this.trackFormInput(input.form, uid);\n        }\n\n        if (this.elementEvents[uid]) {\n            return;\n        }\n\n        let delay;\n        let cb = e => {\n            let validate = this.validators[uid];\n            clearTimeout(delay);\n            delay = setTimeout(validate, this.debounce);\n        };\n\n        let isDropdown = input.tagName.toLowerCase() === 'select';\n        if (isDropdown) {\n            input.addEventListener('change', cb);\n        } else {\n            input.addEventListener('input', cb);\n        }\n\n        this.elementEvents[uid] = cb;\n    }\n\n    /**\n     * Scans the entire document for input elements to be validated.\n     */\n    private scanInputs() {\n        let inputs = document.querySelectorAll('[data-val=\"true\"]');\n\n        for (let i = 0; i < inputs.length; i++) {\n            let input = inputs[i] as HTMLInputElement;\n            this.addInput(input);\n        }\n    }\n\n    /**\n     * Returns a <ul> element as a validation errors summary.\n     */\n    createSummaryDOM() {\n        if (!Object.keys(this.summary).length) {\n            return null;\n        }\n\n        let ul = document.createElement('ul');\n        for (let key in this.summary) {\n            let li = document.createElement('li');\n            li.innerHTML = this.summary[key];\n            ul.appendChild(li);\n        }\n        return ul;\n    }\n\n    /**\n     * Displays validation summary to ASP.NET Core MVC designated elements, when it actually gets updated.\n     */\n    private renderSummary() {\n        let summaryElements = document.querySelectorAll('[data-valmsg-summary=\"true\"]');\n        if (!summaryElements.length) {\n            return;\n        }\n\n        // Using JSON.stringify for quick and painless deep compare of simple KVP. You need to sort the keys first, tho...\n        let shadow = JSON.stringify(this.summary, Object.keys(this.summary).sort());\n        if (shadow === this.renderedSummaryJSON) {\n            return;\n        }\n\n        // Prevents wasteful re-rendering of summary list element with identical items!\n        // console.log('RENDERING VALIDATION SUMMARY');\n        this.renderedSummaryJSON = shadow;\n        let ul = this.createSummaryDOM();\n\n        for (let i = 0; i < summaryElements.length; i++) {\n            let e = summaryElements[i];\n            e.innerHTML = this.validationSummaryMessages[i];\n            if (ul) {\n                e.className = 'validation-summary-errors';\n                e.appendChild(ul.cloneNode(true));\n            } else {\n                e.className = 'validation-summary-valid';\n            }\n        }\n    }\n\n    /**\n     * Adds an error message to an input element, which also updates the validation message elements and validation summary elements.\n     * @param input \n     * @param message \n     */\n    addError(input: HTMLInputElement, message: string) {\n        let spans = this.messageFor[input.name];\n        if (spans) {\n            for (let i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = message;\n                spans[i].className = 'field-validation-error';\n            }\n        }\n\n        input.classList.remove('input-validation-valid');\n        input.classList.add('input-validation-error');\n\n        let uid = this.getElementUID(input);\n        this.summary[uid] = message;\n        this.renderSummary();\n    }\n\n    /**\n     * Removes an error message from an input element, which also updates the validation message elements and validation summary elements.\n     * @param input \n     */\n    removeError(input: HTMLInputElement) {\n        let spans = this.messageFor[input.name];\n        if (spans) {\n            for (let i = 0; i < spans.length; i++) {\n                spans[i].innerHTML = '';\n                spans[i].className = 'field-validation-valid';\n            }\n        }\n\n        input.classList.remove('input-validation-error');\n        input.classList.add('input-validation-valid');\n\n        let uid = this.getElementUID(input);\n        delete this.summary[uid];\n        this.renderSummary();\n    }\n\n    /**\n     * Returns a validation Promise factory for an input element, using given validation directives.  \n     * @param input \n     * @param directives \n     */\n    createValidator(input: HTMLInputElement, directives: ValidationDirective) {\n        return async () => {\n            for (let key in directives) {\n                let directive = directives[key];\n                let provider = this.providers[key];\n\n                if (!provider) {\n                    console.log('aspnet-validation provider not implemented: ' + key);\n                    continue;\n                }\n\n                let result = provider(input.value, input, directive.params);\n                let valid = false;\n                let error = directive.error;\n\n                if (typeof result === 'boolean') {\n                    valid = result;\n                } else if (typeof result === 'string') {\n                    valid = false;\n                    error = result;\n                } else {\n                    let resolution = await result;\n                    if (typeof resolution === 'boolean') {\n                        valid = resolution;\n                    } else {\n                        valid = false;\n                        error = resolution;\n                    }\n                }\n\n                if (!valid) {\n                    this.addError(input, error);\n                    return false;\n                }\n            }\n\n            this.removeError(input);\n            return true;\n        };\n    }\n\n    /**\n     * Load default validation providers and scans the entire document when ready.\n     */\n    bootstrap() {\n        this.addMvcProviders();\n\n        window.addEventListener('load', event => {\n            this.scanMessages();\n            this.scanInputs();\n        });\n    }\n}\n"],"sourceRoot":""}